# syntax=docker/dockerfile:1

# Base image
ARG PYTHON_VERSION=3.12.0
FROM python:${PYTHON_VERSION}-alpine AS base

# Set environment variables for Poetry
ENV POETRY_VERSION=1.8
ENV POETRY_HOME=/opt/poetry
ENV POETRY_VENV=/opt/poetry-venv
ENV POETRY_CACHE_DIR=/opt/.cache

# Install Poetry and dependencies in a build stage
FROM base AS build

# Set working directory
WORKDIR /app

# Copy the pyproject.toml and poetry.lock files to the container
COPY pyproject.toml poetry.lock* /

# Create a virtual environment and install Poetry
RUN python3 -m venv $POETRY_VENV \
    && $POETRY_VENV/bin/pip install -U pip setuptools \
    && $POETRY_VENV/bin/pip install poetry==${POETRY_VERSION} \
    && $POETRY_VENV/bin/poetry config virtualenvs.create false \
    && $POETRY_VENV/bin/poetry install --no-root

# Final stage
FROM base AS final

# Prevents Python from writing pyc files
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED=1

# Copy the virtual environment from the build stage
COPY --from=build ${POETRY_VENV} ${POETRY_VENV}

# Set PATH to include Poetry virtual environment
ENV PATH="${PATH}:${POETRY_VENV}/bin"

# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001

# Add a non-privileged user
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Set working directory
WORKDIR /app

# Copy the application code to the container
COPY . /app

# Switch to the non-privileged user
USER appuser

# Expose the port the app runs on
EXPOSE 8000

# Run the application
CMD ["python", "run.py"]
